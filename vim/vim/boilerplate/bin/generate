#!/usr/bin/env node

var fs = require('fs'),
  path = require('path'),
  nopt = require('nopt'),
  read = require('read'),
  glob = require('glob'),
  child = require('child_process'),
  hogan = require('hogan'),
  fstream = require('fstream');

// cli options

var opts = nopt({
  help: Boolean,
  version: Boolean,
  // only one template now, not used yet
  template: ['default']
}, {
  h: ['--help'],
  v: ['--version']
});

// some help? maybe

if(opts.help) return fs.createReadStream(path.join(__dirname, 'help.txt')).pipe(process.stdout);

// version

if(opts.version) return console.log(require('../package.json').version);


console.log('... Generating from default template ...');

// current directory must be empty

if(fs.readdirSync('./').length) return error(new Error('... Working directory must be empty ...'));

// get the defaults

var data = {};

data.dirname = path.basename(process.cwd());

// some git config
child.exec('git config --global github.user', function(err, user) {
  if(err) return error(err);
  data.user = user.trim();
  generate(data, function(err) {
    if(err) return error(err);
    console.log('... All done ...');
    process.exit(0);
  });
});


// function helpers

function generate(data, cb) {
  ask('name', 'name: ', data.dirname);
  ask('description', 'Plugin description: ');
  ask('author', 'author: ', data.user);
  prompt(data, function(err, props) {
    if(err) return cb(err);
    template(props, cb);
  });
}

function template(data, cb) {
  if(!cb) cb = data, data = {};
  var name = data.template || 'default';

  var tmpldir = path.join(__dirname, '../templates', name);

  glob('**/*', { cwd: tmpldir }, function(err, files) {
    if(err) return error(err);

    var ln = files.length;
    files.forEach(function(file) {
      var ext = path.extname(file),
        bname = path.basename(file).replace(ext, ''),
        dname = path.dirname(file);

      var filename = bname == 'yourplugin' ? path.join(dname, data.name + ext) : file;

      var source = path.join(tmpldir, file);
      // skip non file type, only based on extension here
      fs.stat(source, function(e, stat) {
        if(e) return cb(e);
        if(stat.isDirectory()) return next();

        console.log('... Copy', filename, '...');
        fstream.Reader(source)
          .on('error', error)
          .pipe(fstream.Writer(filename))
          .on('error', error)
          .on('close', function() {
            // process template on close, would be nice if done via a fstream subclass
            fs.readFile(filename, 'utf8', function(e, body) {
              if(e) return cb(e);
              data.filename = path.basename(filename);
              fs.writeFile(filename, hogan.compile(body).render(data), next);
            });
          });
      });
    });


    // continuation handler
    function next(e) {
      if(e) return cb(e);
      if(--ln) return;
      cb();
    }
  });
}

function ask(name, prompt, defaults) {
  ask.prompts = ask.prompts || (ask.prompts = []);
  ask.prompts = ask.prompts.concat({
    name: name,
    prompt: prompt,
    default: defaults || ''
  });
}

function prompt(data, cb) {
  var prompts = ask.prompts;

  (function next(prompt) {
    if(!prompt) return cb(null, data);
    read(prompt, function(err, val) {
      if(err) return cb(err);
      data[prompt.name] = val;
      next(prompts.shift());
    });
  })(prompts.shift());
}


function error(err) {
  if(!err) return;
  console.error('... Oh snap! ...');
  console.error(err.stack || err.message);
  process.exit(err.code || 1);
}


