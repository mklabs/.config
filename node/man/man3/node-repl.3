.\" Generated with Ronnjs/v0.1
.\" http://github.com/kapouer/ronnjs/
.
.TH "NODE\-REPL" "3" "October 2011" "" ""
.
.SH "NAME"
\fBnode-repl\fR \-\- http://nodejs\.org/docs/v0\.4\.8/api/repl\.html
.
.SH "REPL"
A Read\-Eval\-Print\-Loop (REPL) is available both as a standalone program and easily
includable in other programs\.  REPL provides a way to interactively run
JavaScript and see the results\.  It can be used for debugging, testing, or
just trying things out\.
.
.P
By executing \fBnode\fR without any arguments from the command\-line you will be
dropped into the REPL\. It has simplistic emacs line\-editing\.
.
.IP "" 4
.
.nf
mjr:~$ node
Type \'\.help\' for options\.
> a = [ 1, 2, 3];
[ 1, 2, 3 ]
> a\.forEach(function (v) {
\|\.\.\.   console\.log(v);
\|\.\.\.   });
1
2
3
.
.fi
.
.IP "" 0
.
.P
For advanced line\-editors, start node with the environmental variable \fBNODE_NO_READLINE=1\fR\|\.
This will start the REPL in canonical terminal settings which will allow you to use with \fBrlwrap\fR\|\.
.
.P
For example, you could add this to your bashrc file:
.
.IP "" 4
.
.nf
alias node="env NODE_NO_READLINE=1 rlwrap node"
.
.fi
.
.IP "" 0
.
.SS "repl\.start(prompt=\'&gt; \', stream=process\.stdin)"
Starts a REPL with \fBprompt\fR as the prompt and \fBstream\fR for all I/O\.  \fBprompt\fR
is optional and defaults to \fB> \fR\|\.  \fBstream\fR is optional and defaults to \fBprocess\.stdin\fR\|\.
.
.P
Multiple REPLs may be started against the same running instance of node\.  Each
will share the same global object but will have unique I/O\.
.
.P
Here is an example that starts a REPL on stdin, a Unix socket, and a TCP socket:
.
.IP "" 4
.
.nf
var net = require("net"),
    repl = require("repl");
connections = 0;
repl\.start("node via stdin> ");
net\.createServer(function (socket) {
  connections += 1;
  repl\.start("node via Unix socket> ", socket);
})\.listen("/tmp/node\-repl\-sock");
net\.createServer(function (socket) {
  connections += 1;
  repl\.start("node via TCP socket> ", socket);
})\.listen(5001);
.
.fi
.
.IP "" 0
.
.P
Running this program from the command line will start a REPL on stdin\.  Other
REPL clients may connect through the Unix socket or TCP socket\. \fBtelnet\fR is useful
for connecting to TCP sockets, and \fBsocat\fR can be used to connect to both Unix and
TCP sockets\.
.
.P
By starting a REPL from a Unix socket\-based server instead of stdin, you can
connect to a long\-running node process without restarting it\.
.
.SS "REPL Features"
Inside the REPL, Control+D will exit\.  Multi\-line expressions can be input\.
.
.P
The special variable \fB_\fR (underscore) contains the result of the last expression\.
.
.IP "" 4
.
.nf
> [ "a", "b", "c" ]
[ \'a\', \'b\', \'c\' ]
> _\.length
3
> _ += 1
4
.
.fi
.
.IP "" 0
.
.P
The REPL provides access to any variables in the global scope\. You can expose
a variable to the REPL explicitly by assigning it to the \fBcontext\fR object
associated with each \fBREPLServer\fR\|\.  For example:
.
.IP "" 4
.
.nf
// repl_test\.js
var repl = require("repl"),
    msg = "message";
repl\.start()\.context\.m = msg;
.
.fi
.
.IP "" 0
.
.P
Things in the \fBcontext\fR object appear as local within the REPL:
.
.IP "" 4
.
.nf
mjr:~$ node repl_test\.js
> m
\'message\'
.
.fi
.
.IP "" 0
.
.P
There are a few special REPL commands:
.
.IP "\(bu" 4
\fB\|\.break\fR \- While inputting a multi\-line expression, sometimes you get lost
or just don\'t care about completing it\. \fB\|\.break\fR will start over\.
.
.IP "\(bu" 4
\fB\|\.clear\fR \- Resets the \fBcontext\fR object to an empty object and clears any
multi\-line expression\.
.
.IP "\(bu" 4
\fB\|\.exit\fR \- Close the I/O stream, which will cause the REPL to exit\.
.
.IP "\(bu" 4
\fB\|\.help\fR \- Show this list of special commands\.
.
.IP "" 0
.
.P
The following key combinations in the REPL have these special effects:
.
.IP "\(bu" 4
\fB<ctrl>C\fR \- Similar to the \fB\|\.break\fR keyword\.  Terminates the current
command\.  Press twice on a blank line to forcibly exit\.
.
.IP "\(bu" 4
\fB<ctrl>D\fR \- Similar to the \fB\|\.exit\fR keyword\.
.
.IP "" 0
