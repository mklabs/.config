.\" Generated with Ronnjs/v0.1
.\" http://github.com/kapouer/ronnjs/
.
.TH "NODE\-DEBUGGER" "3" "October 2011" "" ""
.
.SH "NAME"
\fBnode-debugger\fR \-\- http://nodejs\.org/docs/v0\.4\.8/api/debugger\.html
.
.SH "Debugger"
V8 comes with an extensive debugger which is accessible out\-of\-process via a
simple TCP protocol \fIhttp://code\.google\.com/p/v8/wiki/DebuggerProtocol\fR\|\.
Node has a built\-in client for this debugger\. To use this, start Node with the \fBdebug\fR argument; a prompt will appear:
.
.IP "" 4
.
.nf
% node debug myscript\.js
debug>
.
.fi
.
.IP "" 0
.
.P
At this point \fBmyscript\.js\fR is not yet running\. To start the script, enter
the command \fBrun\fR\|\. If everything works okay, the output should look like
this:
.
.IP "" 4
.
.nf
% node debug myscript\.js
debug> run
debugger listening on port 5858
connecting\.\.\.ok
.
.fi
.
.IP "" 0
.
.P
Node\'s debugger client doesn\'t support the full range of commands, but
simple step and inspection is possible\. By putting the statement \fBdebugger;\fR
into the source code of your script, you will enable a breakpoint\.
.
.P
For example, suppose \fBmyscript\.js\fR looked like this:
.
.IP "" 4
.
.nf
// myscript\.js
x = 5;
setTimeout(function () {
  debugger;
  console\.log("world");
}, 1000);
console\.log("hello");
.
.fi
.
.IP "" 0
.
.P
Then once the debugger is run, it will break on line 4\.
.
.IP "" 4
.
.nf
% \./node debug myscript\.js
debug> run
debugger listening on port 5858
connecting\.\.\.ok
hello
break in #<an Object>\._onTimeout(), myscript\.js:4
  debugger;
  ^
debug> next
break in #<an Object>\._onTimeout(), myscript\.js:5
  console\.log("world");
  ^
debug> print x
5
debug> print 2+2
4
debug> next
world
break in #<an Object>\._onTimeout() returning undefined, myscript\.js:6
}, 1000);
^
debug> quit
A debugging session is active\. Quit anyway? (y or n) y
%
.
.fi
.
.IP "" 0
.
.P
The \fBprint\fR command allows you to evaluate variables\. The \fBnext\fR command steps
over to the next line\. There are a few other commands available and more to
come type \fBhelp\fR to see others\.
.
.SS "Advanced Usage"
The V8 debugger can be enabled and accessed either by starting Node with
the \fB\-\-debug\fR command\-line flag or by signaling an existing Node process
with \fBSIGUSR1\fR\|\.