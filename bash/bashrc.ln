
# Load all the `.bash` files in `.dotfiles` topics
for i in ~/.dotfiles/**/*.bash; do
  if [ -e $i ]; then
    . $i
  fi
done

###-begin-gimme-completion-###
### credits to npm, this file is coming directly from isaacs/npm repo
#
# Just testing for now. (trying to learn this cool stuff)
#
# npm command completion script
#
# Installation: gimme completion >> ~/.bashrc  (or ~/.zshrc)
#

COMP_WORDBREAKS=${COMP_WORDBREAKS/=/}
COMP_WORDBREAKS=${COMP_WORDBREAKS/@/}
export COMP_WORDBREAKS

if complete &>/dev/null; then
  _gimme_completion () {
    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$COMP_CWORD" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           gimme completion -- "${COMP_WORDS[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
  }
  complete -F _gimme_completion -o default gimme
elif compctl &>/dev/null; then
  _gimme_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       gimme completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _gimme_completion -f gimme
fi
###-end-gimme-completion-###

#!/bin/bash

# grunt
# https://github.com/cowboy/grunt
#
# Copyright (c) 2012 "Cowboy" Ben Alman
# Licensed under the MIT license.
# http://benalman.com/about/license/

# To enable bash <tab> completion for grunt, add the contents of this file to
# your ~/.bashrc file OR source this file: source path/to/bash_completion.sh

function _grunt_completions() {
  local help opts tasks compls
  # The currently-being-completed word.
  local cur="${COMP_WORDS[COMP_CWORD]}"
  # Some paths.
  local basepath="/tmp/grunt_completions/$(pwd)"
  local optsfile="$basepath/opts"
  local tasksfile="$basepath/tasks"
  # If either file doesn't exist or is older than 1 minute old...
  if [[ ! -f "$optsfile" || ! -f "$tasksfile" || $(find "$optsfile" -mmin +1) || $(find "$tasksfile" -mmin +1) ]]; then
    # Create directory if it doesn't exist.
    [[ -d "$basepath" ]] || mkdir -p "$basepath"
    # Get grunt help output including options and local tasks.
    help="$(grunt --help --no-color 2>/dev/null)"
    # Parse out options and tasks individually.
    opts="$(echo "$help" | awk '$1~/^-/ {sub(",","",$1);print $1} $2~/^-/ {print $2}')"
    tasks="$(echo "$help" | awk 't==1 {print $1} /Available tasks/ {t=1} /^$/ {t=0}')"
    # Write files.
    echo "$opts" > "$optsfile"
    echo "$tasks" > "$tasksfile"
  else
    # Read files.
    opts="$(cat "$optsfile")"
    tasks="$(cat "$tasksfile")"
  fi
  compls="$tasks"
  # Only add -- or - options if the user has started typing -
  [[ "$cur" == -* ]] && compls="$compls $opts"
  # Tell complete what stuff to show.
  COMPREPLY=($(compgen -W "$compls" -- "$cur"))
}

complete -o default -F _grunt_completions grunt
